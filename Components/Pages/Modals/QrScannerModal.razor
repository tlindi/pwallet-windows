
<div class="modal-backdrop-qr" style="display: @(_isVisible ? "flex" : "none")">
	<div class="modal-content-qr" @onclick:stopPropagation>
		<div class="qr-scanner-container">
			<QrScanner @ref="_qrScannerRef" OnQrScanned="HandleQrScanned" />
		</div>
		<button class="floating-close-btn" @onclick="CloseModal">
			<span class="bi bi-x-circle me-2"></span> Close
		</button>
	</div>
</div>

@code {
	private bool _isVisible;
	private QrScanner? _qrScannerRef;

	[Parameter] public EventCallback<string> OnQrScanned { get; set; }

	public async void Show()
	{
		_isVisible = true;
		StateHasChanged();

		await Task.Delay(100);
		if (_qrScannerRef != null)
		{
			await _qrScannerRef.StartScanner();
		}
	}

	public async Task Hide()
	{
		_isVisible = false;
		StateHasChanged();

		if (_qrScannerRef != null)
		{
			await _qrScannerRef.StopScanner();
		}
	}

	private async Task HandleQrScanned(string result)
	{
		await Hide();
		var data = result.StartsWith("lightning:") ? result.Substring("lightning:".Length) : result;

		if (OnQrScanned.HasDelegate)
		{
			await OnQrScanned.InvokeAsync(data);
		}
	}

	private async Task CloseModal()
	{
		await Hide();
	}
}