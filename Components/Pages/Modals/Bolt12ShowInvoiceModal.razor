@using pWallet.Interfaces
@using pWallet.Models
@using pWallet.Services
@using TextCopy

@inject IPaymentService PhoenixService
@inject CloudflareDnsService CloudflareDns
@inject IClipboard Clipboard

<div class="modal-backdrop" style="display: @(_isVisible ? "flex" : "none")" @onclick="CloseModal">
	<div class="modal-content" @onclick:stopPropagation>
		<h4 class="modal-title">Bolt 12 Invoice</h4>
		@if (_isLoaded)
		{
			<div>
				<strong>Lightning Address: </strong>
				@if (_isEditingUsername)
				{
					<br />
					<div class="input-group input-group-sm" style="width: 300px;">
						<!-- Input field -->
						<InputText type="text" class="form-control" @bind-Value="_customUsernameInput" aria-label="Custom username" style="width: 150px;" />

						<!-- Help text -->
						<span class="input-group-text" style="font-size: 14px;">@@@_domainName</span>

						<!-- Icons -->
						<div class="button-row mt-1">
							<button style="width: 50px; border: 1px solid; border-color: green; border-radius: 10px; padding-top:3px; padding-bottom: 3px;" class="btn btn-outline-secondary" @onclick="HandleCustomUsernameChange">
								<i class="bi bi-check-lg text-success " style="font-size:18px !important;"></i>
							</button>
							<button style="width: 50px; border: 1px solid; border-color: red; border-radius: 10px; padding-top:3px; padding-bottom: 3px;" class="btn btn-outline-danger" @onclick="() => _isEditingUsername = false">
								<i class="bi bi-x-lg text-danger" style="font-size:18px !important;"></i>
							</button>
						</div>
					</div>

				}
				else
				{
					<span style="color:#FF9900; font-size:14px;"><br/>@Bolt12LightninAddress!.LightningAddress.TrimStart('\u20BF')</span>
					<div class="button-row">
						@* <span class="ms-2"> *@
						<button style="width: 50px; border: 1px solid; border-color: green; border-radius: 10px; padding-top:3px; padding-bottom: 3px;" class="btn btn-outline-secondary" @onclick="() => _isEditingUsername = true">
							<i class="bi bi-pencil text-success  ms-2" style="font-size:18px !important;" >

							</i>
						</button>
							@if (_hasCustomAddress)
							{
							<button style="width: 50px; border: 1px solid; border-color: red; border-radius: 10px; padding-top:3px; padding-bottom: 3px;" class="btn btn-outline-danger" @onclick="HandleDeleteCustomUsername">
									<i class="bi bi-trash text-danger  ms-3" style="font-size:18px !important;" ></i>
								</button>
							}
						@* </span> *@
					</div>
				}
			</div>
			@if (!string.IsNullOrEmpty(_errorMessage))
			{
				<p class="text-danger" style="font-size: 12px;">@_errorMessage</p>
			}
			<div style="text-align: center; margin-top: 5px;" class="">
				<img src="data:image/png;base64,@_qrCodeBase64" alt="QR Code" width="300px" />
			</div>
			<textarea readonly class="form-control">@Bolt12Offer.Offer</textarea>
			@if (_showCopyMessage)
			{
				<span style="color:#ff9900; text-align: center; margin-top:5px;">@_copyMessage</span>
			}
		}
		else
		{
			<p>Loading...</p>
		}

		<div class="button-row mt-3">
			@* <button class="btn btn-outline-info" @onclick="CopyOfferToClipboard">
                <span class="bi bi-clipboard me-2"></span> Copy
            </button> *@
			<button class="btn btn-outline-danger" @onclick="CloseModal">
				<span class="me-2"></span> Close
			</button>
		</div>
	</div>
</div>

@code {
	private string _copyMessage = "Copied to clipboard";
	private bool _showCopyMessage = false;
	private string _domainName = string.Empty;
	private string _customUsername = string.Empty;
	private string _customUsernameInput = string.Empty;
	private bool _hasCustomAddress = false;
	private bool _isEditingUsername = false;
	private string _errorMessage = string.Empty;
	private bool _isVisible;
	private bool _isLoaded;
	private string? _qrCodeBase64 = string.Empty;
	public GetBolt12OfferResponse? Bolt12Offer { get; set; } = new();
	public GetLightningAddressResponse? Bolt12LightninAddress { get; set; } = new();

	[Inject] public QrService QrService { get; set; } = default!;

	public bool IsVisible => _isVisible;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		_domainName = await CloudflareDns.GetDomainNameAsync();
		await CheckForExistingRecord();
	}

	private async Task CheckForExistingRecord()
	{
		if (Bolt12Offer != null && !string.IsNullOrEmpty(Bolt12Offer.Offer))
		{
			var existingUsername = await CloudflareDns.FindRecordNameByContent(Bolt12Offer.Offer);
			if (!string.IsNullOrEmpty(existingUsername))
			{
				_customUsername = existingUsername;
				_hasCustomAddress = true;
				Bolt12LightninAddress!.LightningAddress = $"{_customUsername}@{_domainName}";
			}
		}
	}

	public async Task Show()
	{
		_isVisible = true;
		Bolt12Offer = await PhoenixService.GetBolt12OfferAsync();
		Bolt12LightninAddress = await PhoenixService.GetLightningAddressAsync();

		await CheckForExistingRecord();

		_qrCodeBase64 = QrService.GenerateQrCodeBase64(Bolt12Offer!.Offer);
		_isLoaded = true;

		StateHasChanged();
	}

	public void CloseModal()
	{
		_isVisible = false;
		StateHasChanged();
	}

	// private async Task CopyOfferToClipboard()
	// {
	//     try
	//     {
	//         if (Bolt12Offer != null && !string.IsNullOrWhiteSpace(Bolt12Offer.Offer))
	//         {
	//             await Clipboard.SetTextAsync(Bolt12Offer.Offer);
	//             _showCopyMessage = true;
	//             await Task.Delay(1500);
	//             _showCopyMessage = false;
	//         }
	//     }
	//     catch (Exception ex)
	//     {
	//         Console.WriteLine($"Error copying Bolt12 offer to clipboard: {ex.Message}");
	//     }
	// }

	private async Task CopyAddressToClipboard()
	{
		if (!string.IsNullOrWhiteSpace(Bolt12LightninAddress?.LightningAddress))
		{
			await Clipboard.SetTextAsync(Bolt12LightninAddress?.LightningAddress.TrimStart('\u20BF'));
			_showCopyMessage = true;
			await Task.Delay(1500);
			_showCopyMessage = false;
		}
	}

	private async Task HandleCustomUsernameChange()
	{
		_errorMessage = string.Empty;

		var oldUsername = _customUsername.ToLowerInvariant();
		var newUsername = _customUsernameInput.ToLowerInvariant();

		var recordExists = await CloudflareDns.CheckIfRecordExists(newUsername);
		if (recordExists)
		{
			_errorMessage = "This username is already in use.";
			return;
		}

		if (_hasCustomAddress)
		{
			Console.WriteLine($"Attempting to delete old DNS record: {oldUsername}");
			var deleteSuccess = await CloudflareDns.DeleteDnsRecord(oldUsername, Bolt12Offer!.Offer);
			if (!deleteSuccess)
			{
				_errorMessage = "Failed to remove old custom address. Please try again.";
				return;
			}
			Console.WriteLine($"Successfully deleted old DNS record: {oldUsername}");
		}

		Console.WriteLine($"Attempting to add new DNS record: {newUsername}");
		var recordId = await CloudflareDns.AddTxtRecord(newUsername, Bolt12Offer!.Offer);
		if (!string.IsNullOrEmpty(recordId))
		{
			_hasCustomAddress = true;
			_customUsername = newUsername;
			Bolt12LightninAddress!.LightningAddress = $"{_customUsername}@{_domainName}";
			_isEditingUsername = false;
			Console.WriteLine($"Successfully added new DNS record: {newUsername}");
		}
		else
		{
			_errorMessage = "Failed to create DNS record. Please try again.";
			return;
		}

		StateHasChanged();
	}

	private async Task HandleDeleteCustomUsername()
	{
		if (_hasCustomAddress && Bolt12Offer != null)
		{
			var success = await CloudflareDns.DeleteDnsRecord(_customUsername, Bolt12Offer.Offer);
			if (success)
			{
				_hasCustomAddress = false;
				_customUsername = string.Empty;
				Bolt12LightninAddress = await PhoenixService.GetLightningAddressAsync();
				_errorMessage = "Custom address removed successfully.";
			}
			else
			{
				_errorMessage = "Failed to remove custom address. Please try again.";
			}
			StateHasChanged();
		}
		StateHasChanged();
	}
}
